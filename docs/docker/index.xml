<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> - Chris Albon</title>
    <link>https://chrisalbon.com/docker/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jul 2020 00:00:00 -0700</lastBuildDate>
    
        <atom:link href="https://chrisalbon.com/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add Comments</title>
      <link>https://chrisalbon.com/docker/dockerfiles/add_comments/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/dockerfiles/add_comments/</guid>
      <description> Create Dockerfile Comment Dockerfiles by starting a line with #.
# Build from the Python 3.8 slim image FROM python:3.8-slim # Update packages RUN apt-get update Build Dockerfile Build the Dockerfile (docker build) in the current directory (.) and call the image chrisalbon/python:updated (--tag chrisalbon/python:updated).
docker build --tag chrisalbon/python:updated . Sending build context to Docker daemon 4.096kB Step 1/2 : FROM python:3.8-slim ---&amp;gt; 07ea617545cd Step 2/2 : RUN apt-get update ---&amp;gt; Using cache ---&amp;gt; bfa108e3dff9 Successfully built bfa108e3dff9 Successfully tagged python:updated  </description>
    </item>
    
    <item>
      <title>Add Environment Variables</title>
      <link>https://chrisalbon.com/docker/dockerfiles/add_environment_variables/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/dockerfiles/add_environment_variables/</guid>
      <description>Create Dockerfile # Build from ubuntu:latestFROMubuntu:latest# Create a environment variable called db_nameENVdb_name=&amp;#34;staff_database&amp;#34;# Create a environment variable called db_passwordENVdb_password &amp;#34;legendofkorra&amp;#34; Build Dockerfile Build the Dockerfile (docker build) in the current directory (.) and call the image chrisalbon/big-project:v4 (--tag chrisalbon/big-project:v4).
docker build --tag chrisalbon/big-project:v4 . Sending build context to Docker daemon 2.048kB Step 1/3 : FROM ubuntu:latest ---&amp;gt; 1e4467b07108 Step 2/3 : ENV db_name=&amp;quot;staff_database&amp;quot; ---&amp;gt; Running in 6dfe7174912d Removing intermediate container 6dfe7174912d ---&amp;gt; 7ae6665fd84c Step 3/3 : ENV db_password &amp;quot;legendofkorra&amp;quot; ---&amp;gt; Running in f37d4ad7408b Removing intermediate container f37d4ad7408b ---&amp;gt; f4ac811b0c45 Successfully built f4ac811b0c45 Successfully tagged chrisalbon/big-project:v4  Run Docker Container Create and start (docker container run) an interactive (-it) container named project_v4 (--name project_v4) from the image called chrisalbon/big-project:v4 and then run /bin/bash.</description>
    </item>
    
    <item>
      <title>Add Metadata</title>
      <link>https://chrisalbon.com/docker/dockerfiles/add_metadata/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/dockerfiles/add_metadata/</guid>
      <description>Create Dockerfile # Build from the Python 3.8 slim image FROM python:3.8-slim # Maintainer label LABEL maintainer=&amp;#34;coder@chrisalbon.com&amp;#34; # Labels from http://label-schema.org/rc1/ LABEL org.label-schema.name=&amp;#34;chrisalbon/python-slim-3.8&amp;#34; LABEL org.label-schema.description=&amp;#34;A test container for ChrisAlbon.com&amp;#34; LABEL org.label-schema.url=&amp;#34;https://chrisalbon.com/&amp;#34; # Update packages RUN apt-get update Build Dockerfile Build the Dockerfile (docker build) in the current directory (.) and call the image chrisalbon/python-slim-3.8 (--tag chrisalbon/python-slim-3.8).
docker build --tag chrisalbon/python:updated . Sending build context to Docker daemon 2.048kB Step 1/6 : FROM python:3.</description>
    </item>
    
    <item>
      <title>Automatically Generate Human-Readable Container Names</title>
      <link>https://chrisalbon.com/docker/basics/automatically_generate_human_readable_container_names/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/automatically_generate_human_readable_container_names/</guid>
      <description>If you don&amp;rsquo;t define a name for a docker container an automatically generated name will be created.
Create Three Containers Create and start (docker run) a detacted (--detach) container using the nginx:latest Docker image. Run this three times.
docker run --detach nginx:latest docker run --detach nginx:latest docker run --detach nginx:latest 6b29f78dbf01f7642cca1c54f69e8c068e6048536ef3307cd2960d56192ca11 495ee8ab187a60a9a4f2ecbe40f9de944d597a9afec1be43826249609541d3b 6a96b04886182535b63dfe46111644626ff2f036b3c4cac6c9908100d27b2719  View Automatically Generated Names Show the Docker containers that are running (docker ps).
Add (-a) to view all containers.</description>
    </item>
    
    <item>
      <title>Automatically Restart Containers</title>
      <link>https://chrisalbon.com/docker/basics/automatically_restart_containers/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/automatically_restart_containers/</guid>
      <description> Create Container Create and run (docker run) a detacted container (--detach) that will automatically restart (--restart) using the nginx:latest Docker image.
docker run --detach --restart always nginx:latest [sudo] password for chris: /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/ /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh 10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf 10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh /docker-entrypoint.sh: Configuration complete; ready for start up  </description>
    </item>
    
    <item>
      <title>Connect Container&#39;s Filesystem To Computer&#39;s Filesystem</title>
      <link>https://chrisalbon.com/docker/basics/connect_containers_filesystem_to_computers_filesystem/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/connect_containers_filesystem_to_computers_filesystem/</guid>
      <description>Imagine we want to map important_file_in_container.txt inside the container with important_file.txt outside the container. For example, if we wanted to output the logs from a process inside the container to a log file outside the container.
Create File Create a file (touch) called important_file.txt.
touch important_file.txt Create Two Filepaths # Create absolute filepath to file on computer filesystem ORIGINAL=~/sandbox/docker/important_file.txt # Create absolute path to where we want to create or replace # a file inside the container CONTAINER=/important_file_in_container.</description>
    </item>
    
    <item>
      <title>Create A Container</title>
      <link>https://chrisalbon.com/docker/basics/create_a_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/create_a_container/</guid>
      <description> Create Container Create a Docker container (docker create) based on the image called nginx:latest
docker create nginx:latest 691690bfc38cbd52b60dc80721e1a4e94c1b305310a6a5f5e8fc7dd7be19d16e  </description>
    </item>
    
    <item>
      <title>Create An Image</title>
      <link>https://chrisalbon.com/docker/basics/create_an_image/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/create_an_image/</guid>
      <description>Create Docker Container Create and start a docker container (docker container run) that is interactive (-it), called &amp;ldquo;new-project&amp;rdquo; (--name new-project), and is based on python:3.8-slim. Then run /bin/bash to get a terminal.
docker container run -it --name new-project python:3.8-slim /bin/bash Unable to find image &#39;python:3.8-slim&#39; locally 3.8-slim: Pulling from library/python bf5952930446: Pull complete 385bb58d08e6: Pull complete ab14b629693d: Pull complete 7a5d07f2fd13: Pull complete 56745e40505a: Pull complete Digest: sha256:f7edd1bb431a224e7f4f3e23cbb22738e82f4895a6d28f86294ce006177360c3 Status: Downloaded newer image for python:3.</description>
    </item>
    
    <item>
      <title>Create Read-Only Filesystems In Containers</title>
      <link>https://chrisalbon.com/docker/basics/create_read-only_container_filesystems/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/create_read-only_container_filesystems/</guid>
      <description> Create Container With Read-Only File System Create and run (docker run) a detached container (--detach) whose file system is read-only (--read-only) with the exception of the /files/ directory (-v /files/) and a temp folder at /tmp (-tmpfs /tmp) using the Docker image nginx:latest.
docker run --detach --read-only -v /files/ --tmpfs /tmp nginx:latest 7cc0ce7b4eb7c7b25b49e80c1c9e633fd0cba2a87a30cbc5bae42d8d17ad37bc  </description>
    </item>
    
    <item>
      <title>Export All Files And Folders Out Of A Container</title>
      <link>https://chrisalbon.com/docker/basics/exporting_all_files_folders_out_of_a_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/exporting_all_files_folders_out_of_a_container/</guid>
      <description>Run Detached Container Create and start (docker run) the detached (--detach) the Docker image called special-project (--name special-project) based on the python:3.8-slim Docker image.
docker run --detach --name special-project python:3.8-slim 427e7823c84bdb600ead8411fe3b6685ab7c8e5a000c9e30c136c977d557a55c  Export All Files And Folders Out Of Container Export all files and folders (docker container export) from the container special-project and save them into a file (--output) called special-projects.tar.
docker container export --output special-project.tar special-project A tar file has now been created with the container&amp;rsquo;s complete filesystem.</description>
    </item>
    
    <item>
      <title>Get Bash Shell In A Container</title>
      <link>https://chrisalbon.com/docker/basics/get_bash_shell_in_a_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/get_bash_shell_in_a_container/</guid>
      <description>Run Detached Container Create and start a Docker container (docker run) that is detached (-detacted), named www (--name www), and uses the Docker image ngix:latest.
docker run --detach --name www nginx:latest f104467b9c7fea62ef6a1b369f90da246eb170dd5c90f6d1d9feede9c2dc7ea1  SSH Into Container Execute (docker exec) /bin/bash on the interactive (-it) container called www.
sudo docker exec -it www /bin/bash root@f104467b9c7f:/#  View Container&amp;rsquo;s Filesystem View all files and folders (ls) that displays using long format and shows hidden files (-al)</description>
    </item>
    
    <item>
      <title>Ignore Files While Building</title>
      <link>https://chrisalbon.com/docker/dockerfiles/ignore_files_while_building/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/dockerfiles/ignore_files_while_building/</guid>
      <description>Create File Called .dockerignore touch .dockerignore Add File Contents # Ignore any file called .git .git # Ignore any file with a .ipynb extension *.ipynb # Except don&amp;#39;t ignore important_analysis.ipynb !important_analysis.ipynb # Ignore every file and folder in secret_project/ directory secret_project/ Any Docker build in the directory with the .dockerignore file will follow rules declared above.</description>
    </item>
    
    <item>
      <title>List Containers</title>
      <link>https://chrisalbon.com/docker/basics/list_containers/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/list_containers/</guid>
      <description> List Containers View all (-a) containers (docker ps)
docker ps -a [sudo] password for chris: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b622067d595e dockerinaction/ch2_agent &amp;quot;/watcher/watcher.sh&amp;quot; 2 minutes ago Up 2 minutes agent 4263374fbc42 busybox:1.29 &amp;quot;/bin/sh&amp;quot; 8 minutes ago Up 8 minutes web_test fecff8afca16 dockerinaction/ch2_mailer &amp;quot;/mailer/mailer.sh&amp;quot; 11 minutes ago Up 11 minutes 33333/tcp mailer db1be25177d3 nginx:latest &amp;quot;/docker-entrypoint.…&amp;quot; 21 minutes ago Up 21 minutes 80/tcp www   CONTAINER ID: ID of the container IMAGE: Image used by the container COMMAND: Command executed in the container CREATED: When the container was created STATUS: Length of time the container as been running PORTS: Port exposed by the container NAMES: Name of the container  </description>
    </item>
    
    <item>
      <title>Pull An Image From A Repository</title>
      <link>https://chrisalbon.com/docker/basics/pull_an_image_from_a_repository/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/pull_an_image_from_a_repository/</guid>
      <description> Pull Down An Image From A Docker Repository Pull down the docker image (docker pull) called python:3.8-slim from Docker.io (the default registry).
docker pull python:3.8-slim 3.8-slim: Pulling from library/python Digest: sha256:f7edd1bb431a224e7f4f3e23cbb22738e82f4895a6d28f86294ce006177360c3 Status: Image is up to date for python:3.8-slim docker.io/library/python:3.8-slim  </description>
    </item>
    
    <item>
      <title>Remove An Image</title>
      <link>https://chrisalbon.com/docker/basics/remove_an_image/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/remove_an_image/</guid>
      <description> Pull Down An Image From A Docker Repository Pull down the docker image (docker pull) called python:3.8-slim from Docker.io (the default registry).
docker pull python:3.8-slim 3.8-slim: Pulling from library/python Digest: sha256:f7edd1bb431a224e7f4f3e23cbb22738e82f4895a6d28f86294ce006177360c3 Status: Image is up to date for python:3.8-slim docker.io/library/python:3.8-slim  Remove Docker Image Remove the docker image docker rmi called python:3.8-slim
docker rmi python:3.8-slim Untagged: python:3.8-slim Untagged: python@sha256:f7edd1bb431a224e7f4f3e23cbb22738e82f4895a6d28f86294ce006177360c3  </description>
    </item>
    
    <item>
      <title>Rename A Container</title>
      <link>https://chrisalbon.com/docker/basics/rename_a_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/rename_a_container/</guid>
      <description> Run Container Create and start (docker run) a detached (--detach) Docker container called python-project (-name python-project) from the image python:3.8-slim.
docker run --detach --name python-project python:3.8-slim Unable to find image &#39;python:3.8-slim&#39; locally 3.8-slim: Pulling from library/python Digest: sha256:f7edd1bb431a224e7f4f3e23cbb22738e82f4895a6d28f86294ce006177360c3 Status: Downloaded newer image for python:3.8-slim b76fb54ae278dc9ba951c4bd1826a37389e2c5a32b82914d95bcfea9e8731529  Rename Container Rename (docker rename) the Docker container python-project to python-production-application.
docker rename python-project python-production-application </description>
    </item>
    
    <item>
      <title>Restart A Container</title>
      <link>https://chrisalbon.com/docker/basics/restart_a_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/restart_a_container/</guid>
      <description> Run Container Create and start (docker run) a detached (--detach) Docker container called new-project (--name new-project) based on the python:3.8-slim image.
docker run --detach --name new-project python:3.8-slim e86b5951906b8a1f0ee0bf9f78adf66fcb16f06d89be5282eec5344c498f365e  Restart That Container Restart (docker restart) the Docker container called new-project.
docker restart new-project new-project  </description>
    </item>
    
    <item>
      <title>Run A Detached Container</title>
      <link>https://chrisalbon.com/docker/basics/run_a_detached_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/run_a_detached_container/</guid>
      <description> Run Detached Container Create and start (docker run) the detached (--detach) the Docker image called special-project (--name special-project) based on the python:3.8-slim Docker image.
docker run --detach --name special-project python:3.8-slim e9f9ace9b2c4b8d5fc06a5b18ce7ea89ff5b2322233baf6e4a3154294a389422  </description>
    </item>
    
    <item>
      <title>Saving An Image As A File</title>
      <link>https://chrisalbon.com/docker/basics/saving_an_image_as_a_file/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/saving_an_image_as_a_file/</guid>
      <description>Pull Down An Image From Docker Registry Pull down the docker image (docker pull) called python:3.8-slim from Docker.io (the default registry).
docker pull python:3.8-slim 3.8-slim: Pulling from library/python Digest: sha256:f7edd1bb431a224e7f4f3e23cbb22738e82f4895a6d28f86294ce006177360c3 Status: Image is up to date for python:3.8-slim docker.io/library/python:3.8-slim  Save Image As A File Save the Docker image (docker save) python:3.8-slim to the file (-o) named python-3.8.tar.
docker save -o python-3.8.tar python:3.8-slim Check File Exists View all files and folders (ls) that displays using long format and shows hidden files (-al)</description>
    </item>
    
    <item>
      <title>Set Container To Run A Bash Command On Start</title>
      <link>https://chrisalbon.com/docker/basics/set_container_to_run_a_bash_command_on_start/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/set_container_to_run_a_bash_command_on_start/</guid>
      <description>Create Docker Container With Entrypoint And Default Command Create a Docker container (docker container create) called application (--name application) built of the ubuntu:latest image. Upon starting the container launches bash (--entrypoint &amp;quot;/bin/bash&amp;quot;) and runs -c &amp;quot;echo &#39;hello world&#39;&amp;quot;.
docker container create --name application --entrypoint &amp;#34;/bin/bash&amp;#34; ubuntu:latest -c &amp;#34;echo &amp;#39;hello world&amp;#39;&amp;#34; 70a1a028a374e5c61007c01062c8be0f59a4406a89000ea0a59451553628a0bf  Create New Image Create a new image (docker container commit) from the application container called new-application. Add author info (-a &amp;quot;Chris Albon&amp;quot;) and a commit message (-m &amp;quot;Added analysis file&amp;quot;).</description>
    </item>
    
    <item>
      <title>Start A Container</title>
      <link>https://chrisalbon.com/docker/basics/start_a_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/start_a_container/</guid>
      <description> Create Container Create a Docker container (docker create) from the image python:3.8-slim. Then save the output as a variable (CID=$()).
This works because upon completion docker create outputs the unique container ID to stout.
CID=$(docker create python:3.8-slim) Start Container Start the Docker container (docker start) with the container ID specified by CID ($CID)
# With root privileges, start the Container that has # the container ID defined in the variable CID docker start $CID f4bc1146274fb6f32f583824e1df58ed6187de7b979b7c843997d42eb86fdd11  </description>
    </item>
    
    <item>
      <title>Stop A Container</title>
      <link>https://chrisalbon.com/docker/basics/stop_a_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/stop_a_container/</guid>
      <description> Run Container Create and start (docker run) a detached (--detach) Docker container called secret-project (--name secret-project) based on the Docker image python:3.8-slim.
docker run --detach --name secret-project python:3.8-slim Stop Container Stop (docker stop) the Docker container called secret-project.
docker stop secret-project secret-project  </description>
    </item>
    
    <item>
      <title>Use Environment Variables</title>
      <link>https://chrisalbon.com/docker/basics/use_environment_variables/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/use_environment_variables/</guid>
      <description>This is how you can pass environment variables into Docker containers.
Create Environment Variables DB_NAME=&amp;#34;staff_database&amp;#34; DB_PASSWORD=&amp;#34;funny cat dog mouse&amp;#34; Create Container With Environment Variables Create and start (docker run) Docker based on the Docker image python:3.8-slim. The container has access to two environment variables, DB_NAME and DB_PASSWORD (--env DB_NAME --env DB_PASSWORD).
docker run --env DB_NAME --env DB_PASSWORD python:3.8-slim</description>
    </item>
    
    <item>
      <title>View All Changes To A Container</title>
      <link>https://chrisalbon.com/docker/basics/view_all_changes_to_a_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/view_all_changes_to_a_container/</guid>
      <description>Create Docker Container Run an interactive (-it) Docker container called project (--name project) based on the ubuntu:latest image, then run /bin/bash.
docker container run -it --name project ubuntu:latest /bin/bash Unable to find image &#39;ubuntu:latest&#39; locally latest: Pulling from library/ubuntu 3ff22d22a855: Pull complete e7cb79d19722: Pull complete 323d0d660b6a: Pull complete b7f616834fd0: Pull complete Digest: sha256:5d1d5407f353843ecf8b16524bc5565aa332e9e6a1297c73a92d3e754b8a636d Status: Downloaded newer image for ubuntu:latest root@60655028c0d0:/#  Create File Create an empty file (touch) called file.</description>
    </item>
    
    <item>
      <title>View Container Logs</title>
      <link>https://chrisalbon.com/docker/basics/view_container_logs/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/view_container_logs/</guid>
      <description>Run Container With root privileges, run the docker image nginx:latest as a detached container and call it www Create and start (docker run) a detached (--detach) Docker container called www (--name www) based on the image nginx:latest.
docker run --detach --name www nginx:latest View Logs Of That Container View the logs (docker log) of the container called www.
Anything written to stdout or stderr streams will appear in logs.</description>
    </item>
    
    <item>
      <title>View Image Size</title>
      <link>https://chrisalbon.com/docker/basics/view_image_size/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/view_image_size/</guid>
      <description> View Image Size List (ls) all (-a) Docker images (docker image).
docker image ls -a REPOSITORY TAG IMAGE ID CREATED SIZE new-application latest ce5f6bd0eb9f About an hour ago 73.9MB new-project-with-analysis-file latest 0684311a4db5 34 hours ago 113MB ...  </description>
    </item>
    
    <item>
      <title>Watch Container Logs Live</title>
      <link>https://chrisalbon.com/docker/basics/watch_container_logs_live/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/watch_container_logs_live/</guid>
      <description>Run Container Create and start (docker run) a detached container (--detach) called www (--name www) based on the Docker image nginx:latest.
docker run --detach --name www nginx:latest View Logs Of That Container View the logs (docker log) of the Docker container called www live (--follow).
docker log --follow www /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/ /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh 10-listen-on-ipv6-by-default.</description>
    </item>
    
    <item>
      <title>Work In A Container</title>
      <link>https://chrisalbon.com/docker/basics/work_in_a_container/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://chrisalbon.com/docker/basics/work_in_a_container/</guid>
      <description>Create Docker Container Run a Docker container (docker container run) interactively (-it) called project (--name project) based on the image ubuntu:latest and then run /bin/bash to get terminal.
docker container run -it --name project ubuntu:latest /bin/bash Unable to find image &#39;ubuntu:latest&#39; locally latest: Pulling from library/ubuntu 3ff22d22a855: Pull complete e7cb79d19722: Pull complete 323d0d660b6a: Pull complete b7f616834fd0: Pull complete Digest: sha256:5d1d5407f353843ecf8b16524bc5565aa332e9e6a1297c73a92d3e754b8a636d Status: Downloaded newer image for ubuntu:latest root@60655028c0d0:/#  You are now put into the Bash terminal of the Docker image.</description>
    </item>
    
  </channel>
</rss>